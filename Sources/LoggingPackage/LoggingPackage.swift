// Logging Package
// Logging Package
//
// https://github.com/StasonLV/LoggingPackage

import OSLog

extension Logger {
    /// –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –ª–æ–≥-—Ñ–∞–π–ª–æ–≤ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è.
    public enum Categories: String {
        /// - viewcycleLogging: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –∂–∏–∑–Ω–µ–Ω–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–æ–≤ –∏–ª–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è.
        case viewcycleLogging = "viewcycleLogging"
        /// - userInterfaceLogging: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞.
        case userInterfaceLogging = "userInterfaceLogging"
        /// - networkLogging: –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–±—ã—Ç–∏–π —Å–µ—Ç–µ–≤–æ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.
        case networkLogging = "networkLogging"
        /// - statisticsLogging: –û–±—â–∞—è –∫–∞—Ç–µ–≥–æ—Ä–∏—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è –Ω–µ—Å–ø–µ—Ü–∏—Ñ–∏—á–Ω—ã—Ö —Å–æ–±—ã—Ç–∏–π –∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏.
        case statisticsLogging = "statisticsLogging"
    }
    /// –ò–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä –±–∞–Ω–¥–ª–∞ –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –≤ Console.app..
    private static var subsystem = Bundle.main.bundleIdentifier!
    /// –§–æ—Ä–º–∞—Ç—Ç–µ—Ä –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –ª–æ–≥ —Ñ–∞–π–ª–∞.
    private static let dateFormatter: DateFormatter = {
        let formatter = DateFormatter()
        formatter.dateFormat = "HH:mm:ss"
        return formatter
    }()
    /// Log a message with the specified category, message, priority, and additional information.
    ///
    /// - Parameters:
    ///   - category: The category of the log.
    ///   - message: The log message.
    ///   - level: The priority level of the log.
    ///   - file: The file path. By default, it is automatically filled with the calling file path.
    ///   - function: The function name. By default, it is automatically filled with the calling function name.
    ///   - line: The line number. By default, it is automatically filled with the calling line number.
    public static func log(
        for category: Categories,
        with message: String,
        priority level: OSLogType,
        file: String = #file,
        function: String = #function,
        line: Int = #line
    ) {
        let logTime = dateFormatter.string(from: Date())
        let logMessage = "\(iconForCategory(category)) [\(logTime)][\(URL(fileURLWithPath: file).deletingPathExtension().lastPathComponent) on line: \(line)] - \(function) - \(message)"
        
        os_log("%{public}@", log: OSLog(subsystem: subsystem, category: category.rawValue), type: level, logMessage)
    }
    /// Add icon to log depending on selected category.
    ///
    /// - Parameters:
    ///   - category: The category of the log.
    ///
    /// - Returns:
    ///  Returns icon according to log type.
    internal static func iconForCategory(_ category: Categories) -> String {
        switch category {
        case .viewcycleLogging:
            return "üîÑ"
        case .userInterfaceLogging:
            return "‚öôÔ∏è"
        case .networkLogging:
            return "üåê"
        case .statisticsLogging:
            return "üìä"
        }
    }
}

public struct TextLogger {
    public static func writeLogToFile(text: String) {
        guard let documentsDirectory = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first else {
            return
        }
        
        let logFileURL = documentsDirectory.appendingPathComponent("log.txt")
        
        do {
            let textToWrite = "\(Date()): \(text)\n"
            
            if let fileHandle = FileHandle(forWritingAtPath: logFileURL.path) {
                fileHandle.seekToEndOfFile()
                fileHandle.write(textToWrite.data(using: .utf8)!)
                fileHandle.closeFile()
            } else {
                try textToWrite.write(to: logFileURL, atomically: true, encoding: .utf8)
            }
            
            print("Log successfully appended to file!")
            
        } catch {
            print("Failed to write log to file: \(error.localizedDescription)")
        }
    }

    public static func checkFileContent() {
        guard let fileURL = FileManager.default.urls(for: .documentDirectory, in: .userDomainMask).first?.appendingPathComponent("log.txt") else {
            print("–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        }
        
        do {
            let fileContent = try String(contentsOf: fileURL, encoding: .utf8)
            print("–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Ñ–∞–π–ª–∞:")
            print(fileContent)
        } catch {
            print("–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞: \(error.localizedDescription)")
        }
    }

}
